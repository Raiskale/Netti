"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unsign = exports.sign = void 0;
const encoder = new TextEncoder();
const sign = async (value, secret) => {
    const data = encoder.encode(value);
    const key = await createKey(secret, ['sign']);
    const signature = await crypto.subtle.sign('HMAC', key, data);
    const hash = btoa(String.fromCharCode(...new Uint8Array(signature))).replace(/=+$/, '');
    return value + '.' + hash;
};
exports.sign = sign;
const unsign = async (cookie, secret) => {
    const value = cookie.slice(0, cookie.lastIndexOf('.'));
    const hash = cookie.slice(cookie.lastIndexOf('.') + 1);
    const data = encoder.encode(value);
    const key = await createKey(secret, ['verify']);
    const signature = byteStringToUint8Array(atob(hash));
    const valid = await crypto.subtle.verify('HMAC', key, signature, data);
    return valid ? value : false;
};
exports.unsign = unsign;
async function createKey(secret, usages) {
    const key = await crypto.subtle.importKey('raw', encoder.encode(secret), { name: 'HMAC', hash: 'SHA-256' }, false, usages);
    return key;
}
function byteStringToUint8Array(byteString) {
    const array = new Uint8Array(byteString.length);
    for (let i = 0; i < byteString.length; i++) {
        array[i] = byteString.charCodeAt(i);
    }
    return array;
}
