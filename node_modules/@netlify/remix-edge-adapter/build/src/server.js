"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRequestHandler = void 0;
const remix_runtime_1 = require("@netlify/remix-runtime");
function createRequestHandler({ build, mode, getLoadContext, }) {
    const remixHandler = (0, remix_runtime_1.createRequestHandler)(build, mode);
    const assetPath = build.assets.url.split('/').slice(0, -1).join('/');
    return async (request, context) => {
        const { pathname } = new URL(request.url);
        // Skip the handler for static files
        if (pathname.startsWith(`${assetPath}/`)) {
            return;
        }
        try {
            const loadContext = (await (getLoadContext === null || getLoadContext === void 0 ? void 0 : getLoadContext(request, context))) || context;
            const response = await remixHandler(request, loadContext);
            // A useful header for debugging
            response.headers.set('x-nf-runtime', 'Edge');
            if (response.status === 404) {
                // Check if there is a matching static file
                const originResponse = await context.next({
                    sendConditionalRequest: true,
                });
                if (originResponse.status !== 404) {
                    return originResponse;
                }
            }
            return response;
        }
        catch (error) {
            console.error(error);
            return new Response('Internal Error', { status: 500 });
        }
    };
}
exports.createRequestHandler = createRequestHandler;
