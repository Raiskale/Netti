import * as http from 'http';
import http__default from 'http';
import { MiniflareCore, CorePlugin, BuildPlugin, BindingsPlugin, MiniflareCoreOptions, fetch, Request, Response } from '@miniflare/core';
import { CachePlugin } from '@miniflare/cache';

declare const PLUGINS: {
    CorePlugin: typeof CorePlugin;
    CachePlugin: typeof CachePlugin;
    BuildPlugin: typeof BuildPlugin;
    BindingsPlugin: typeof BindingsPlugin;
};
type MiniOxygenType = typeof PLUGINS;
type MiniOxygenOptions = MiniflareCoreOptions<MiniOxygenType> & {
    sourceMap?: boolean;
    globalFetch?: typeof fetch;
};
declare class MiniOxygen extends MiniflareCore<MiniOxygenType> {
    constructor({ sourceMap, ...options }: MiniOxygenOptions, env: {
        [key: string]: unknown;
    });
    dispose(): Promise<void>;
    createServer(options: MiniOxygenServerOptions): http.Server<typeof http.IncomingMessage, typeof http.ServerResponse>;
}

interface MiniOxygenServerHooks {
    onRequest?: (request: Request, defaultDispatcher: (request?: Request) => Promise<Response>) => void | Response | Promise<void | Response>;
    onResponse?: (request: Request, response: Response) => void | Promise<void>;
    onResponseError?: (request: Request, error: unknown) => void;
}
declare const OXYGEN_HEADERS_MAP: {
    readonly ip: {
        readonly name: "oxygen-buyer-ip";
        readonly defaultValue: "127.0.0.1";
    };
    readonly longitude: {
        readonly name: "oxygen-buyer-longitude";
        readonly defaultValue: "-122.40140";
    };
    readonly latitude: {
        readonly name: "oxygen-buyer-latitude";
        readonly defaultValue: "37.78855";
    };
    readonly continent: {
        readonly name: "oxygen-buyer-continent";
        readonly defaultValue: "NA";
    };
    readonly country: {
        readonly name: "oxygen-buyer-country";
        readonly defaultValue: "US";
    };
    readonly region: {
        readonly name: "oxygen-buyer-region";
        readonly defaultValue: "California";
    };
    readonly regionCode: {
        readonly name: "oxygen-buyer-region-code";
        readonly defaultValue: "CA";
    };
    readonly city: {
        readonly name: "oxygen-buyer-city";
        readonly defaultValue: "San Francisco";
    };
    readonly isEuCountry: {
        readonly name: "oxygen-buyer-is-eu-country";
        readonly defaultValue: "";
    };
    readonly timezone: {
        readonly name: "oxygen-buyer-timezone";
        readonly defaultValue: "America/Los_Angeles";
    };
    readonly deploymentId: {
        readonly name: "oxygen-buyer-deployment-id";
        readonly defaultValue: "local";
    };
    readonly shopId: {
        readonly name: "oxygen-buyer-shop-id";
        readonly defaultValue: "development";
    };
    readonly storefrontId: {
        readonly name: "oxygen-buyer-storefront-id";
        readonly defaultValue: "development";
    };
};
type OxygenHeaderParams = keyof typeof OXYGEN_HEADERS_MAP;
interface MiniOxygenServerOptions extends MiniOxygenServerHooks {
    assetsDir?: string;
    autoReload?: boolean;
    publicPath?: string;
    proxyServer?: string;
    oxygenHeaders?: Partial<{
        [key in OxygenHeaderParams]: string;
    }>;
}
declare function createServer(mf: MiniOxygen, { assetsDir, publicPath, autoReload, proxyServer, ...rest }: MiniOxygenServerOptions): http__default.Server<typeof http__default.IncomingMessage, typeof http__default.ServerResponse>;

export { MiniOxygenServerOptions as M, MiniOxygenType as a, MiniOxygen as b, MiniOxygenServerHooks as c, createServer as d };
