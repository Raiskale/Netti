import path from 'node:path';
import fs from 'node:fs';
import { createRequire } from 'node:module';
import { fileURLToPath } from 'node:url';

const require2 = createRequire(import.meta.url);
const realGqlTagPluck = require2.resolve("@graphql-tools/graphql-tag-pluck");
const depth = path.extname(import.meta.url) === ".ts" ? "../" : "../../";
const vendorGqlTagPluck = fileURLToPath(
  new URL(depth + "/vendor/graphql-tag-pluck", import.meta.url)
);
fs.copyFileSync(
  path.join(vendorGqlTagPluck, "visitor.cjs"),
  realGqlTagPluck.replace(/index\.js$/, "visitor.js")
);
fs.copyFileSync(
  path.join(vendorGqlTagPluck, "visitor.mjs"),
  realGqlTagPluck.replace("cjs", "esm").replace(/index\.js$/, "visitor.js")
);
const visitorPluginCommon = require2.resolve(
  "@graphql-codegen/visitor-plugin-common"
);
const selectionSetToObjectFileCJS = visitorPluginCommon.replace(
  "index.js",
  "selection-set-to-object.js"
);
const selectionSetToObjectFileESM = selectionSetToObjectFileCJS.replace(
  "cjs",
  "esm"
);
fs.writeFileSync(
  selectionSetToObjectFileCJS,
  patchSelectionSet(fs.readFileSync(selectionSetToObjectFileCJS, "utf-8")),
  "utf-8"
);
fs.writeFileSync(
  selectionSetToObjectFileESM,
  patchSelectionSet(fs.readFileSync(selectionSetToObjectFileESM, "utf-8")),
  "utf-8"
);
function patchSelectionSet(content) {
  return content.replace("&& s.union", "&& s?.union");
}
//# sourceMappingURL=out.js.map
//# sourceMappingURL=patch.js.map