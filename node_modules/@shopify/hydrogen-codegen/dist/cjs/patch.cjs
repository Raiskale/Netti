'use strict';

var path = require('node:path');
var fs = require('node:fs');
var node_module = require('node:module');
var node_url = require('node:url');

var _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;
function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var path__default = /*#__PURE__*/_interopDefault(path);
var fs__default = /*#__PURE__*/_interopDefault(fs);

const require2 = node_module.createRequire((typeof document === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : (_documentCurrentScript && _documentCurrentScript.src || new URL('out.js', document.baseURI).href)));
const realGqlTagPluck = require2.resolve("@graphql-tools/graphql-tag-pluck");
const depth = path__default.default.extname((typeof document === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : (_documentCurrentScript && _documentCurrentScript.src || new URL('out.js', document.baseURI).href))) === ".ts" ? "../" : "../../";
const vendorGqlTagPluck = node_url.fileURLToPath(
  new URL(depth + "/vendor/graphql-tag-pluck", (typeof document === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : (_documentCurrentScript && _documentCurrentScript.src || new URL('out.js', document.baseURI).href)))
);
fs__default.default.copyFileSync(
  path__default.default.join(vendorGqlTagPluck, "visitor.cjs"),
  realGqlTagPluck.replace(/index\.js$/, "visitor.js")
);
fs__default.default.copyFileSync(
  path__default.default.join(vendorGqlTagPluck, "visitor.mjs"),
  realGqlTagPluck.replace("cjs", "esm").replace(/index\.js$/, "visitor.js")
);
const visitorPluginCommon = require2.resolve(
  "@graphql-codegen/visitor-plugin-common"
);
const selectionSetToObjectFileCJS = visitorPluginCommon.replace(
  "index.js",
  "selection-set-to-object.js"
);
const selectionSetToObjectFileESM = selectionSetToObjectFileCJS.replace(
  "cjs",
  "esm"
);
fs__default.default.writeFileSync(
  selectionSetToObjectFileCJS,
  patchSelectionSet(fs__default.default.readFileSync(selectionSetToObjectFileCJS, "utf-8")),
  "utf-8"
);
fs__default.default.writeFileSync(
  selectionSetToObjectFileESM,
  patchSelectionSet(fs__default.default.readFileSync(selectionSetToObjectFileESM, "utf-8")),
  "utf-8"
);
function patchSelectionSet(content) {
  return content.replace("&& s.union", "&& s?.union");
}
//# sourceMappingURL=out.js.map
//# sourceMappingURL=patch.cjs.map