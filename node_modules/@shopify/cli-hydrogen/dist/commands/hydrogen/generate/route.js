import Command from '@shopify/cli-kit/node/base-command';
import { resolvePath } from '@shopify/cli-kit/node/path';
import { renderSuccess } from '@shopify/cli-kit/node/ui';
import colors from '@shopify/cli-kit/node/colors';
import { commonFlags } from '../../../lib/flags.js';
import { Flags, Args } from '@oclif/core';
import { ALL_ROUTE_CHOICES, generateRoutes } from '../../../lib/setups/routes/generate.js';
import { isV1RouteConventionInstalled } from '../../../lib/remix-version-interop.js';

class GenerateRoute extends Command {
  static description = "Generates a standard Shopify route.";
  static flags = {
    adapter: Flags.string({
      description: "Remix adapter used in the route. The default is `@shopify/remix-oxygen`.",
      env: "SHOPIFY_HYDROGEN_FLAG_ADAPTER"
    }),
    typescript: Flags.boolean({
      description: "Generate TypeScript files",
      env: "SHOPIFY_HYDROGEN_FLAG_TYPESCRIPT"
    }),
    force: commonFlags.force,
    path: commonFlags.path
  };
  static hidden;
  static args = {
    routeName: Args.string({
      name: "routeName",
      description: `The route to generate. One of ${ALL_ROUTE_CHOICES.join()}.`,
      required: true,
      options: ALL_ROUTE_CHOICES,
      env: "SHOPIFY_HYDROGEN_ARG_ROUTE"
    })
  };
  async run() {
    const {
      flags,
      args: { routeName }
    } = await this.parse(GenerateRoute);
    const directory = flags.path ? resolvePath(flags.path) : process.cwd();
    await runGenerate({
      ...flags,
      directory,
      routeName
    });
  }
}
async function runGenerate(options) {
  const { routes } = await generateRoutes({
    ...options,
    v1RouteConvention: isV1RouteConventionInstalled()
  });
  const padEnd = 3 + routes.reduce(
    (acc, route) => Math.max(acc, route.destinationRoute.length),
    0
  );
  const successfulGenerationCount = routes.filter(
    ({ operation }) => operation !== "skipped"
  ).length;
  renderSuccess({
    headline: `${successfulGenerationCount} of ${routes.length} route${routes.length > 1 ? "s" : ""} generated`,
    body: {
      list: {
        items: routes.map(
          ({ operation, destinationRoute }) => destinationRoute.padEnd(padEnd) + colors.dim(`[${operation}]`)
        )
      }
    }
  });
}

export { GenerateRoute as default, runGenerate };
