import { Flags } from '@oclif/core';
import Command from '@shopify/cli-kit/node/base-command';
import { outputInfo, outputWarn, outputContent, outputToken } from '@shopify/cli-kit/node/output';
import { rmdir, fileSize, glob, readFile, writeFile, fileExists, copyFile } from '@shopify/cli-kit/node/fs';
import { resolvePath, joinPath, relativePath } from '@shopify/cli-kit/node/path';
import { getPackageManager } from '@shopify/cli-kit/node/node-package-manager';
import colors from '@shopify/cli-kit/node/colors';
import { getProjectPaths, getRemixConfig, handleRemixImportFail, assertOxygenChecks } from '../../lib/remix-config.js';
import { commonFlags, deprecated, flagsToCamelObject } from '../../lib/flags.js';
import { checkLockfileStatus } from '../../lib/check-lockfile.js';
import { findMissingRoutes } from '../../lib/missing-routes.js';
import { muteRemixLogs, createRemixLogger } from '../../lib/log.js';
import { codegen } from '../../lib/codegen.js';
import { hasMetafile, buildBundleAnalysis, getBundleAnalysisSummary } from '../../lib/bundle/analyzer.js';
import { AbortError } from '@shopify/cli-kit/node/error';
import { isCI } from '../../lib/is-ci.js';

const LOG_WORKER_BUILT = "\u{1F4E6} Worker built";
const MAX_WORKER_BUNDLE_SIZE = 10;
class Build extends Command {
  static description = "Builds a Hydrogen storefront for production.";
  static flags = {
    path: commonFlags.path,
    sourcemap: Flags.boolean({
      description: "Generate sourcemaps for the build.",
      env: "SHOPIFY_HYDROGEN_FLAG_SOURCEMAP",
      allowNo: true,
      default: true
    }),
    "bundle-stats": Flags.boolean({
      description: "Show a bundle size summary after building.",
      default: true,
      allowNo: true
    }),
    "lockfile-check": Flags.boolean({
      description: "Checks that there is exactly 1 valid lockfile in the project.",
      env: "SHOPIFY_HYDROGEN_FLAG_LOCKFILE_CHECK",
      default: true,
      allowNo: true
    }),
    "disable-route-warning": Flags.boolean({
      description: "Disable warning about missing standard routes.",
      env: "SHOPIFY_HYDROGEN_FLAG_DISABLE_ROUTE_WARNING"
    }),
    codegen: commonFlags.codegen,
    "codegen-config-path": commonFlags.codegenConfigPath,
    base: deprecated("--base")(),
    entry: deprecated("--entry")(),
    target: deprecated("--target")()
  };
  async run() {
    const { flags } = await this.parse(Build);
    const directory = flags.path ? resolvePath(flags.path) : process.cwd();
    await runBuild({
      ...flagsToCamelObject(flags),
      useCodegen: flags.codegen,
      directory
    });
  }
}
async function runBuild({
  directory,
  useCodegen = false,
  codegenConfigPath,
  sourcemap = false,
  disableRouteWarning = false,
  bundleStats = true,
  lockfileCheck = true,
  assetPath
}) {
  if (!process.env.NODE_ENV) {
    process.env.NODE_ENV = "production";
  }
  if (assetPath) {
    process.env.HYDROGEN_ASSET_BASE_URL = assetPath;
  }
  const { root, buildPath, buildPathClient, buildPathWorkerFile, publicPath } = getProjectPaths(directory);
  if (lockfileCheck) {
    await checkLockfileStatus(root, isCI());
  }
  await muteRemixLogs();
  console.time(LOG_WORKER_BUILT);
  outputInfo(`
\u{1F3D7}\uFE0F  Building in ${process.env.NODE_ENV} mode...`);
  const [remixConfig, [{ build }, { logThrown }, { createFileWatchCache }]] = await Promise.all([
    getRemixConfig(root),
    Promise.all([
      import('@remix-run/dev/dist/compiler/build.js'),
      import('@remix-run/dev/dist/compiler/utils/log.js'),
      import('@remix-run/dev/dist/compiler/fileWatchCache.js')
    ]).catch(handleRemixImportFail),
    rmdir(buildPath, { force: true })
  ]);
  assertOxygenChecks(remixConfig);
  await Promise.all([
    copyPublicFiles(publicPath, buildPathClient),
    build({
      config: remixConfig,
      options: {
        mode: process.env.NODE_ENV,
        sourcemap
      },
      logger: createRemixLogger(),
      fileWatchCache: createFileWatchCache()
    }).catch((thrown) => {
      logThrown(thrown);
      process.exit(1);
    }),
    useCodegen && codegen({ ...remixConfig, configFilePath: codegenConfigPath })
  ]);
  if (process.env.NODE_ENV !== "development") {
    console.timeEnd(LOG_WORKER_BUILT);
    const sizeMB = await fileSize(buildPathWorkerFile) / (1024 * 1024);
    if (await hasMetafile(buildPath)) {
      await writeBundleAnalysis(
        buildPath,
        root,
        buildPathWorkerFile,
        sizeMB,
        bundleStats,
        remixConfig
      );
    } else {
      await writeSimpleBuildStatus(
        root,
        buildPathWorkerFile,
        sizeMB,
        remixConfig
      );
    }
  }
  if (!disableRouteWarning) {
    const missingRoutes = findMissingRoutes(remixConfig);
    if (missingRoutes.length) {
      const packageManager = await getPackageManager(root);
      const exec = packageManager === "npm" ? "npx" : packageManager;
      outputWarn(
        `Heads up: Shopify stores have a number of standard routes that aren\u2019t set up yet.
Some functionality and backlinks might not work as expected until these are created or redirects are set up.
This build is missing ${missingRoutes.length} route${missingRoutes.length > 1 ? "s" : ""}. For more details, run \`${exec} shopify hydrogen check routes\`.
`
      );
    }
  }
  if (process.env.NODE_ENV !== "development") {
    await cleanClientSourcemaps(buildPathClient);
  }
  if (!process.env.SHOPIFY_UNIT_TEST && !assetPath) {
    process.exit(0);
  }
}
async function cleanClientSourcemaps(buildPathClient) {
  const bundleFiles = await glob(joinPath(buildPathClient, "**/*.js"));
  await Promise.all(
    bundleFiles.map(async (filePath) => {
      const file = await readFile(filePath);
      return await writeFile(
        filePath,
        file.replace(/\/\/# sourceMappingURL=.+\.js\.map$/gm, "")
      );
    })
  );
}
async function writeBundleAnalysis(buildPath, root, buildPathWorkerFile, sizeMB, bundleStats, remixConfig) {
  const bundleAnalysisPath = await buildBundleAnalysis(buildPath);
  outputInfo(
    outputContent`   ${colors.dim(
      relativePath(root, buildPathWorkerFile)
    )}  ${outputToken.link(
      colors.yellow(sizeMB.toFixed(2) + " MB"),
      bundleAnalysisPath
    )}\n`
  );
  if (bundleStats && sizeMB < MAX_WORKER_BUNDLE_SIZE) {
    outputInfo(
      outputContent`${await getBundleAnalysisSummary(buildPathWorkerFile) || "\n"}\n    │\n    └─── ${outputToken.link(
        "Complete analysis: " + bundleAnalysisPath,
        bundleAnalysisPath
      )}\n\n`
    );
  }
  if (sizeMB >= MAX_WORKER_BUNDLE_SIZE) {
    throw new AbortError(
      "\u{1F6A8} Worker bundle exceeds 10 MB! Oxygen has a maximum worker bundle size of 10 MB.",
      outputContent`See the bundle analysis for a breakdown of what is contributing to the bundle size:\n${outputToken.link(
        bundleAnalysisPath,
        bundleAnalysisPath
      )}`
    );
  } else if (sizeMB >= 5) {
    outputWarn(
      `\u{1F6A8} Worker bundle exceeds 5 MB! This can delay your worker response.${remixConfig.serverMinify ? "" : " Minify your bundle by adding `serverMinify: true` to remix.config.js."}
`
    );
  }
}
async function writeSimpleBuildStatus(root, buildPathWorkerFile, sizeMB, remixConfig) {
  outputInfo(
    outputContent`   ${colors.dim(
      relativePath(root, buildPathWorkerFile)
    )}  ${colors.yellow(sizeMB.toFixed(2) + " MB")}\n`
  );
  if (sizeMB >= MAX_WORKER_BUNDLE_SIZE) {
    throw new AbortError(
      "\u{1F6A8} Worker bundle exceeds 10 MB! Oxygen has a maximum worker bundle size of 10 MB."
    );
  } else if (sizeMB >= 5) {
    outputWarn(
      `\u{1F6A8} Worker bundle exceeds 5 MB! This can delay your worker response.${remixConfig.serverMinify ? "" : " Minify your bundle by adding `serverMinify: true` to remix.config.js."}
`
    );
  }
}
async function copyPublicFiles(publicPath, buildPathClient) {
  if (!await fileExists(publicPath)) {
    return;
  }
  return copyFile(publicPath, buildPathClient);
}

export { copyPublicFiles, Build as default, runBuild };
