import { fetch } from '@shopify/cli-kit/node/http';
import { getBugsnag } from './bugsnag.js';
import { loadPackageJson } from './utils.js';

var MetricName = /* @__PURE__ */ ((MetricName2) => {
  MetricName2["BuildTime"] = "build_time";
  MetricName2["NumFilesRequested"] = "num_files_requested";
  MetricName2["NumFilesUploaded"] = "num_files_uploaded";
  MetricName2["TotalSizeUploaded"] = "total_size_uploaded";
  MetricName2["TotalSizeRequested"] = "total_size_requested";
  MetricName2["TotalTime"] = "total_time";
  MetricName2["UploadTime"] = "upload_time";
  return MetricName2;
})(MetricName || {});
class MetricsExporter {
  metrics = {};
  metricPrefix = "oxygen.cli";
  defaultTags;
  exportUrl;
  constructor(options) {
    const { version: cliVersion } = loadPackageJson();
    const { version: hydrogenVersion } = loadPackageJson(
      `${options.rootPath}/node_modules/@shopify/hydrogen`
    );
    this.defaultTags = {
      ci_provider: options.ciProvider,
      cli_version: `oxygen-cli@${cliVersion || "unknown"}`,
      hydrogen_version: hydrogenVersion || "unknown"
    };
    this.exportUrl = "https://metrics.myshopify.dev";
  }
  add(name, value, tags = {}) {
    const metric = {
      value,
      tags
    };
    if (this.metrics[name]) {
      this.metrics[name].push(metric);
    } else {
      this.metrics[name] = [metric];
    }
  }
  formatTags(tags) {
    return Object.entries(tags).map(([key, value]) => `${key}:${value}`);
  }
  async export() {
    const metricsToExport = Object.entries(this.metrics).map(([metricName, values]) => {
      const name = `${this.metricPrefix}.${metricName}`;
      return values.map(({ value, tags }) => {
        return {
          name,
          type: "gauge",
          value,
          tags: this.formatTags({ ...tags, ...this.defaultTags })
        };
      });
    }).flat();
    try {
      await fetch(this.exportUrl, {
        method: "POST",
        body: JSON.stringify({ events: metricsToExport })
      });
    } catch (error) {
      const Bugsnag = getBugsnag();
      if (Bugsnag && (error instanceof Error || typeof error === "string")) {
        Bugsnag.notify(error);
      }
    }
  }
}

export { MetricName, MetricsExporter };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=metrics-exporter.js.map