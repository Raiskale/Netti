{"version":3,"sources":["../../src/utils/utils.ts"],"names":["Header","path"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path, {dirname} from 'path';\nimport {fileURLToPath} from 'url';\n\nimport {fileExists, fileExistsSync} from '@shopify/cli-kit/node/fs';\nimport {outputInfo, outputWarn} from '@shopify/cli-kit/node/output';\nimport {joinPath} from '@shopify/cli-kit/node/path';\nimport {AbortError} from '@shopify/cli-kit/node/error';\n\nimport {\n  ClientError,\n  DeploymentConfig,\n  DeploymentToken,\n} from '../deploy/types.js';\n\nexport const deployDefaults: {[key: string]: string | number} = {\n  assetsDirDefault: 'dist/client/',\n  buildCommandDefault: 'yarn build',\n  verificationDurationDefault: 180,\n  maxUploadAttempts: 3,\n  maxResumabeUploadAttempts: 9,\n  workerDirDefault: 'dist/worker/',\n};\n\nexport function errorHandler(error: any) {\n  if (isClientError(error)) {\n    if (error.statusCode === 401) {\n      throw new AbortError(\n        'You are not authorized to perform this action. Please check your deployment token.',\n      );\n    }\n\n    if (error.statusCode === 429) {\n      throw new AbortError(\n        \"You've made too many requests. Please try again later\",\n      );\n    }\n  }\n\n  if (error instanceof AbortError && error.message.includes('503')) {\n    throw new AbortError(\n      'The server is currently unavailable. Please try again later.',\n    );\n  }\n}\n\nexport function getBuildCommandFromLockFile(config: DeploymentConfig): string {\n  const lockFileBuildCommands = new Map([\n    ['package-lock.json', 'npm run build'],\n    ['pnpm-lock.yaml', 'pnpm run build'],\n    ['yarn.lock', 'yarn build'],\n  ]);\n\n  const foundLockFiles = [];\n\n  for (const [lockFileName, buildCommand] of lockFileBuildCommands) {\n    if (fileExistsSync(joinPath(config.rootPath!, lockFileName))) {\n      foundLockFiles.push({lockFileName, buildCommand});\n    }\n  }\n\n  if (foundLockFiles.length > 1) {\n    const lockFilesList = foundLockFiles\n      .map(({lockFileName}) => lockFileName)\n      .join(', ');\n    outputWarn(\n      `Warning: Multiple lock files found: (${lockFilesList}).`,\n      stderrLogger,\n    );\n  }\n\n  if (foundLockFiles.length > 0) {\n    const {lockFileName, buildCommand} = foundLockFiles[0] as {\n      lockFileName: string;\n      buildCommand: string;\n    };\n\n    const infoMsg = foundLockFiles.length > 1 ? '' : `Found: ${lockFileName}. `;\n\n    outputInfo(\n      `${infoMsg}Assuming \"${buildCommand}\" as build command. Use the buildCommand flag to override.`,\n      stderrLogger,\n    );\n    return buildCommand;\n  }\n\n  return String(deployDefaults.buildCommandDefault);\n}\n\nexport enum Header {\n  OxygenNamespaceHandle = 'X-Oxygen-Namespace-Handle',\n}\n\nexport function isClientError(error: unknown): error is ClientError {\n  return typeof error === 'object' && error !== null && 'statusCode' in error;\n}\n\nexport function loadPackageJson(projectFolder?: string) {\n  let jsonPath;\n  if (projectFolder) {\n    jsonPath = path.join(projectFolder, 'package.json');\n  } else {\n    const __filename = fileURLToPath(import.meta.url);\n    const __dirname = dirname(__filename);\n    jsonPath = path.join(__dirname, '../../package.json');\n  }\n\n  if (!fs.existsSync(jsonPath)) {\n    return {};\n  }\n  const packageJsonData = fs.readFileSync(jsonPath, 'utf8');\n  return JSON.parse(packageJsonData);\n}\n\nexport function stderrLogger(log: string): void {\n  process.stderr.write(`${log}\\n`);\n}\n\nexport const maxLabelLength = 375;\n\nexport function parseToken(inputToken: string): DeploymentToken {\n  try {\n    const decodedToken = Buffer.from(inputToken, 'base64').toString('utf-8');\n    const rawToken = JSON.parse(decodedToken);\n    return convertKeysToCamelCase(rawToken) as DeploymentToken;\n  } catch (error) {\n    throw new Error(\n      `Error processing deployment token. Please check your token and try again.`,\n    );\n  }\n}\n\ninterface VerifyConfigParams {\n  config: DeploymentConfig;\n  performedBuild?: boolean;\n}\n\nexport async function verifyConfig({\n  config,\n  performedBuild = false,\n}: VerifyConfigParams) {\n  const {rootPath, workerDir, assetsDir, skipBuild, workerOnly} = config;\n  const checkPaths: {[pathType: string]: string} = {\n    root: rootPath!,\n  };\n\n  if (skipBuild || performedBuild) {\n    checkPaths.worker = joinPath(rootPath!, workerDir!);\n    if (!workerOnly) {\n      checkPaths.assets = joinPath(rootPath!, assetsDir!);\n    }\n  }\n\n  for (const pathType of Object.keys(checkPaths)) {\n    await checkPath(checkPaths[pathType]!, pathType);\n  }\n\n  const addressRegex =\n    /^https:\\/\\/(?:[\\w-]+\\.)*[\\w-]+|^https:\\/\\/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/;\n  if (!addressRegex.test(config.deploymentUrl)) {\n    throw new Error(`Invalid deployment service URL: ${config.deploymentUrl}`);\n  }\n}\n\nasync function checkPath(path: string, pathType: string) {\n  if (!(await fileExists(path))) {\n    if (pathType === 'assets') {\n      outputWarn(\n        `Use the \"workerOnly\" flag to perform a worker-only deployment.`,\n        stderrLogger,\n      );\n    }\n    throw new Error(`Path not found: ${path}`);\n  }\n}\n\ninterface TokenType {\n  [x: string]: string | TokenType;\n}\n\nfunction convertKeysToCamelCase(\n  obj: TokenType | string,\n): DeploymentToken | string {\n  if (typeof obj === 'object') {\n    return Object.keys(obj).reduce((result: any, key: string) => {\n      const camelCaseKey = key.replace(/([-_][a-z])/gi, ($1) =>\n        $1.toUpperCase().replace('-', '').replace('_', ''),\n      );\n      if (obj[key] === undefined) {\n        throw new Error(`Invalid token: ${key} is undefined`);\n      }\n      result[camelCaseKey] = convertKeysToCamelCase(obj[key] as TokenType);\n      return result;\n    }, {} as DeploymentToken);\n  }\n  return obj;\n}\n"]}