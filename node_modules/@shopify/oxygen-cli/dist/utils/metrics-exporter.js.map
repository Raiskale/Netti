{"version":3,"sources":["../../src/utils/metrics-exporter.ts"],"names":["MetricName"],"mappings":"AACA,SAAQ,aAAY;AAEpB,SAAQ,kBAAiB;AACzB,SAAQ,uBAAsB;AAkBvB,IAAK,aAAL,kBAAKA,gBAAL;AACL,EAAAA,YAAA,eAAY;AACZ,EAAAA,YAAA,uBAAoB;AACpB,EAAAA,YAAA,sBAAmB;AACnB,EAAAA,YAAA,uBAAoB;AACpB,EAAAA,YAAA,wBAAqB;AACrB,EAAAA,YAAA,eAAY;AACZ,EAAAA,YAAA,gBAAa;AAPH,SAAAA;AAAA,GAAA;AAUL,MAAM,gBAAgB;AAAA,EACnB,UAA4B,CAAC;AAAA,EACpB,eAAuB;AAAA,EACvB;AAAA,EACA;AAAA,EAEjB,YAAY,SAAiC;AAC3C,UAAM,EAAC,SAAS,WAAU,IAAI,gBAAgB;AAC9C,UAAM,EAAC,SAAS,gBAAe,IAAI;AAAA,MACjC,GAAG,QAAQ,QAAQ;AAAA,IACrB;AACA,SAAK,cAAc;AAAA,MACjB,aAAa,QAAQ;AAAA,MACrB,aAAa,cAAc,cAAc,SAAS;AAAA,MAClD,kBAAkB,mBAAmB;AAAA,IACvC;AACA,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,IACE,MACA,OACA,OAAgC,CAAC,GAC3B;AACN,UAAM,SAAS;AAAA,MACb;AAAA,MACA;AAAA,IACF;AAEA,QAAI,KAAK,QAAQ,IAAI,GAAG;AACtB,WAAK,QAAQ,IAAI,EAAG,KAAK,MAAM;AAAA,IACjC,OAAO;AACL,WAAK,QAAQ,IAAI,IAAI,CAAC,MAAM;AAAA,IAC9B;AAAA,EACF;AAAA,EAEA,WAAW,MAAyC;AAClD,WAAO,OAAO,QAAQ,IAAI,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM,GAAG,GAAG,IAAI,KAAK,EAAE;AAAA,EACrE;AAAA,EAEA,MAAM,SAAwB;AAC5B,UAAM,kBAAgC,OAAO,QAAQ,KAAK,OAAO,EAC9D,IAAI,CAAC,CAAC,YAAY,MAAM,MAAM;AAC7B,YAAM,OAAO,GAAG,KAAK,YAAY,IAAI,UAAU;AAE/C,aAAO,OAAO,IAAI,CAAC,EAAC,OAAO,KAAI,MAAM;AACnC,eAAO;AAAA,UACL;AAAA,UACA,MAAM;AAAA,UACN;AAAA,UACA,MAAM,KAAK,WAAW,EAAC,GAAG,MAAM,GAAG,KAAK,YAAW,CAAC;AAAA,QACtD;AAAA,MACF,CAAC;AAAA,IACH,CAAC,EACA,KAAK;AAER,QAAI;AACF,YAAM,MAAM,KAAK,WAAW;AAAA,QAC1B,QAAQ;AAAA,QACR,MAAM,KAAK,UAAU,EAAC,QAAQ,gBAAe,CAAC;AAAA,MAChD,CAAC;AAAA,IACH,SAAS,OAAO;AACd,YAAM,UAAU,WAAW;AAC3B,UAAI,YAAY,iBAAiB,SAAS,OAAO,UAAU,WAAW;AACpE,gBAAQ,OAAO,KAAK;AAAA,MACtB;AAAA,IACF;AAAA,EACF;AACF","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\nimport {fetch} from '@shopify/cli-kit/node/http';\n\nimport {getBugsnag} from './bugsnag.js';\nimport {loadPackageJson} from './utils.js';\n\ninterface GodogEvent {\n  name: string;\n  type: string;\n  value: number;\n  tags: string[];\n}\n\ninterface MetricCollection {\n  [metricName: string]: [{value: number; tags: {[key: string]: string}}];\n}\n\ninterface MetricsExporterOptions {\n  ciProvider: string;\n  rootPath: string;\n}\n\nexport enum MetricName {\n  BuildTime = 'build_time',\n  NumFilesRequested = 'num_files_requested',\n  NumFilesUploaded = 'num_files_uploaded',\n  TotalSizeUploaded = 'total_size_uploaded',\n  TotalSizeRequested = 'total_size_requested',\n  TotalTime = 'total_time',\n  UploadTime = 'upload_time',\n}\n\nexport class MetricsExporter {\n  private metrics: MetricCollection = {};\n  private readonly metricPrefix: string = 'oxygen.cli';\n  private readonly defaultTags: {[key: string]: string};\n  private readonly exportUrl: string;\n\n  constructor(options: MetricsExporterOptions) {\n    const {version: cliVersion} = loadPackageJson();\n    const {version: hydrogenVersion} = loadPackageJson(\n      `${options.rootPath}/node_modules/@shopify/hydrogen`,\n    );\n    this.defaultTags = {\n      ci_provider: options.ciProvider,\n      cli_version: `oxygen-cli@${cliVersion || 'unknown'}`,\n      hydrogen_version: hydrogenVersion || 'unknown',\n    };\n    this.exportUrl = 'https://metrics.myshopify.dev';\n  }\n\n  add(\n    name: MetricName,\n    value: number,\n    tags: {[key: string]: string} = {},\n  ): void {\n    const metric = {\n      value,\n      tags,\n    };\n\n    if (this.metrics[name]) {\n      this.metrics[name]!.push(metric);\n    } else {\n      this.metrics[name] = [metric];\n    }\n  }\n\n  formatTags(tags: {[key: string]: string}): string[] {\n    return Object.entries(tags).map(([key, value]) => `${key}:${value}`);\n  }\n\n  async export(): Promise<void> {\n    const metricsToExport: GodogEvent[] = Object.entries(this.metrics)\n      .map(([metricName, values]) => {\n        const name = `${this.metricPrefix}.${metricName}`;\n\n        return values.map(({value, tags}) => {\n          return {\n            name,\n            type: 'gauge',\n            value,\n            tags: this.formatTags({...tags, ...this.defaultTags}),\n          };\n        });\n      })\n      .flat();\n\n    try {\n      await fetch(this.exportUrl, {\n        method: 'POST',\n        body: JSON.stringify({events: metricsToExport}),\n      });\n    } catch (error) {\n      const Bugsnag = getBugsnag();\n      if (Bugsnag && (error instanceof Error || typeof error === 'string')) {\n        Bugsnag.notify(error);\n      }\n    }\n  }\n}\n"]}