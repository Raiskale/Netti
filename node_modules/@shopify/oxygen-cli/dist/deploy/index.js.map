{"version":3,"sources":["../../src/deploy/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Logger,\n  outputInfo,\n  outputSuccess,\n  outputWarn,\n} from '@shopify/cli-kit/node/output';\n\nimport {stderrLogger, verifyConfig} from '../utils/utils.js';\nimport {getBugsnag, initializeBugsnag} from '../utils/bugsnag.js';\nimport {MetricsExporter, MetricName} from '../utils/metrics-exporter.js';\n\nimport {buildInitiate} from './build-initiate.js';\nimport {buildCancel} from './build-cancel.js';\nimport {getUploadFiles} from './get-upload-files.js';\nimport {deploymentInitiate} from './deployment-initiate.js';\nimport {deploymentComplete} from './deployment-complete.js';\nimport {verifyDeployment} from './verify-deployment.js';\nimport {deploymentCancel} from './deployment-cancel.js';\nimport {uploadFiles} from './upload-files.js';\nimport {\n  Build,\n  DeploymentConfig,\n  DeploymentHooks,\n  VerificationError,\n} from './types.js';\nimport {buildProject} from './build-project.js';\nimport {createLabels, getMetadata, getEnvironmentInput} from './metadata.js';\n\ninterface CreateDeployOptions {\n  config: DeploymentConfig;\n  hooks?: DeploymentHooks;\n  logger?: Logger;\n}\n\nexport async function createDeploy(\n  options: CreateDeployOptions,\n): Promise<string | undefined> {\n  const cliStartTime = performance.now();\n  initializeBugsnag(!options.config.bugsnag);\n  const Bugsnag = getBugsnag();\n  Bugsnag?.addMetadata('config', {\n    ...options.config,\n    deploymentToken: {...options.config.deploymentToken, accessToken: '***'},\n  });\n\n  const {config, hooks} = options;\n  const logger = options.logger ?? stderrLogger;\n  const build = {} as Build;\n  let buildCompleted;\n  let deployment;\n\n  try {\n    const metadata = await getMetadata(config, logger);\n    const labels = createLabels(metadata);\n    const environment = getEnvironmentInput(config, metadata);\n    Bugsnag?.addMetadata('metadata', {\n      environment,\n      labels,\n      metadata,\n    });\n    const metricsExporter = new MetricsExporter({\n      ciProvider: metadata.name || 'unknown',\n      rootPath: config.rootPath!,\n    });\n\n    if (!config.workerOnly && !config.skipBuild) {\n      const buildInitiateResponse = await buildInitiate({\n        config,\n        environment,\n        labels,\n        logger,\n      });\n      build.id = buildInitiateResponse.build.id;\n      build.assetPath = buildInitiateResponse.build.assetPath;\n    }\n\n    if (!config.skipBuild) {\n      await buildProject({\n        config,\n        assetPath: build.assetPath,\n        hooks,\n        metricsExporter,\n      });\n      await verifyConfig({config, performedBuild: true});\n    }\n    buildCompleted = true;\n\n    const manifest = await getUploadFiles(config, metricsExporter);\n    Bugsnag?.addMetadata('manifest', manifest);\n    const deploymentInitiateInput = build.id\n      ? {buildId: build.id, manifest}\n      : {environment, manifest, labels};\n\n    deployment = await deploymentInitiate({\n      config,\n      input: deploymentInitiateInput,\n      logger,\n    });\n\n    await uploadFiles({\n      config,\n      targets: deployment.deploymentTargets,\n      hooks,\n      logger,\n      metricsExporter,\n    });\n    const deploymentCompleteOp = await deploymentComplete(\n      config,\n      deployment.deployment.id,\n    );\n    metricsExporter.add(MetricName.TotalTime, performance.now() - cliStartTime);\n    await metricsExporter.export();\n\n    if (!config.skipVerification) {\n      await verifyDeployment({\n        config,\n        url: deploymentCompleteOp.deployment.url,\n        logger,\n        hooks,\n      });\n    }\n\n    const urlMessage = config.publicDeployment ? 'public' : 'private';\n    outputSuccess(\n      `\\nThe deployment can be reached at the ${deploymentCompleteOp.deployment.url} ${urlMessage} preview URL`,\n      logger,\n    );\n    // in CI environments, we want to output the URL to stdout\n    if (metadata.name !== 'none') {\n      outputInfo(deploymentCompleteOp.deployment.url);\n    }\n\n    return deploymentCompleteOp.deployment.url;\n  } catch (error) {\n    if (\n      config.bugsnag &&\n      Bugsnag &&\n      (error instanceof Error || typeof error === 'string')\n    ) {\n      Bugsnag.notify(error);\n    }\n\n    if (!(error instanceof Error)) {\n      // eslint-disable-next-line no-console\n      console.error('Unknown error', error);\n      return Promise.reject(new Error('Unknown error'));\n    }\n\n    if (error instanceof VerificationError) {\n      outputWarn(error.message, logger);\n    } else if (build.id && !buildCompleted) {\n      outputWarn(\n        `Build failed with: ${error.message}, cancelling build.`,\n        logger,\n      );\n\n      await buildCancel({\n        config,\n        buildId: build.id!,\n        reason: error.message,\n        logger,\n      }).catch((err) => {\n        if (err instanceof Error) {\n          outputWarn(`Failed to cancel build: ${err.message}`, logger);\n        }\n      });\n    } else if (deployment?.deployment.id) {\n      outputWarn(\n        `Deployment failed with: ${error.message}, cancelling deployment.`,\n        logger,\n      );\n      await deploymentCancel({\n        config,\n        deploymentId: deployment.deployment.id,\n        reason: error.message,\n        logger,\n      }).catch((err) => {\n        if (err instanceof Error) {\n          outputWarn(`Failed to cancel deployment: ${err.message}`, logger);\n        }\n      });\n    }\n    return Promise.reject(error);\n  }\n}\n\nexport type {DeploymentConfig, DeploymentHooks};\nexport {parseToken} from '../utils/utils.js';\n"]}