import { graphqlRequest } from '@shopify/cli-kit/node/api/graphql';
import { AbortError } from '@shopify/cli-kit/node/error';
import { outputCompleted } from '@shopify/cli-kit/node/output';
import { Header, errorHandler } from '../utils/utils.js';
import { DeploymentInitiateQuery } from './graphql/deployment-initiate.js';

async function deploymentInitiate(options) {
  const { config, input, logger } = options;
  const variables = {
    buildId: input.buildId,
    environment: input.environment,
    files: input.manifest,
    labels: input.labels,
    isPrivate: !config.publicDeployment
  };
  try {
    const response = await graphqlRequest({
      query: DeploymentInitiateQuery,
      api: "Oxygen",
      url: `${config.deploymentUrl}/api/v2/admin/graphql`,
      token: config.deploymentToken.accessToken,
      variables,
      addedHeaders: {
        [Header.OxygenNamespaceHandle]: config.deploymentToken.namespace
      }
    });
    if (response.deploymentInitiate.userErrors.length >= 1) {
      throw new AbortError(
        `Failed to create deployment. ${response.deploymentInitiate.userErrors[0]?.message}`
      );
    }
    outputCompleted(
      `Deployment initiated, ${response.deploymentInitiate.deploymentTargets.length} files to upload.`,
      logger
    );
    return response.deploymentInitiate;
  } catch (error) {
    errorHandler(error);
    throw error;
  }
}

export { deploymentInitiate };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=deployment-initiate.js.map