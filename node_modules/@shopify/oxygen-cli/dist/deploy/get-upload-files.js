import { glob, fileSizeSync, readFileSync } from '@shopify/cli-kit/node/fs';
import { fileHash } from '@shopify/cli-kit/node/crypto';
import { joinPath, relativePath } from '@shopify/cli-kit/node/path';
import { lookupMimeType } from '@shopify/cli-kit/node/mimes';
import { MetricName } from '../utils/metrics-exporter.js';
import { FileType } from './types.js';

async function getUploadFiles(config, metricsExporter) {
  const workerPath = joinPath(config.rootPath, config.workerDir);
  const workerFiles = await glob(`${workerPath}/**`);
  let manifest = createManifestEntries({
    files: workerFiles,
    basePath: workerPath,
    type: FileType.Worker,
    filter: workerFileFilter
  });
  if (!config.workerOnly) {
    const assetPath = joinPath(config.rootPath, config.assetsDir);
    const assetFiles = await glob(`${assetPath}/**`);
    manifest = [
      ...manifest,
      ...createManifestEntries({
        files: assetFiles,
        basePath: assetPath,
        type: FileType.Asset,
        filter: assetFileFilter
      })
    ];
  }
  metricsExporter?.add(MetricName.NumFilesRequested, manifest.length);
  const totalSize = manifest.reduce((total, file) => total + file.fileSize, 0) / 1024;
  metricsExporter?.add(MetricName.TotalSizeRequested, totalSize);
  return manifest;
}
function createHash(file) {
  const buff = readFileSync(file);
  return fileHash(buff);
}
function createManifestEntries(params) {
  const { files, basePath, type, filter } = params;
  const manifest = [];
  files.forEach((file) => {
    const filePath = relativePath(basePath, file);
    if (filter && !filter(filePath)) {
      return;
    }
    manifest.push({
      filePath,
      fileSize: fileSizeSync(file),
      mimeType: lookupMimeType(file),
      fileType: type,
      fileHash: createHash(file)
    });
  });
  return manifest;
}
function workerFileFilter(fileName) {
  const allowedExtensions = [".js.map", ".mjs.map", ".map", ".js", ".mjs"];
  const allowedFilenames = ["index"];
  const regexString = `^(${allowedFilenames.join(
    "|"
  )})(${allowedExtensions.join("|")})$`;
  const regex = new RegExp(regexString);
  return regex.test(fileName.toLowerCase());
}
function assetFileFilter(fileName) {
  const disallowedExtensions = [".map"];
  const regexString = `(${disallowedExtensions.join("|")})$`;
  const regex = new RegExp(regexString);
  return !regex.test(fileName.toLowerCase());
}

export { getUploadFiles };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=get-upload-files.js.map