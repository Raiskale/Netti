{"version":3,"sources":["../../src/deploy/build-project.ts"],"names":[],"mappings":"AAAA,SAAQ,aAAY;AACpB,SAAQ,mBAA4B;AAEpC,SAAQ,kBAAiB;AACzB,SAAyB,kBAAiB;AAW1C,eAAsB,aAAa,SAA8B;AAC/D,QAAM,EAAC,QAAQ,WAAW,MAAK,IAAI;AACnC,QAAM,UAAU,WAAW;AAE3B,MAAI,OAAO,eAAe;AACxB,UAAM,YAAY,YAAY,IAAI;AAClC,WAAO,MACJ,cAAc,SAAS,EACvB,KAAK,MAAM;AACV,cAAQ,iBAAiB;AAAA,QACvB,WAAW;AAAA,QACX,YAAY,IAAI,IAAI;AAAA,MACtB;AAAA,IACF,CAAC,EACA,MAAM,CAAC,UAAU;AAChB,YAAM,IAAI,MAAM,qCAAqC,KAAK,EAAE;AAAA,IAC9D,CAAC;AAAA,EACL;AAEA,QAAM,uBAAuB,YACzB,EAAC,yBAAyB,UAAS,IACnC,CAAC;AACL,MAAI;AACF,UAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AACrC,UAAI,SAAS;AACb,YAAM,eAAe,IAAI,YAAY;AAErC,mBAAa,GAAG,QAAQ,CAAC,UAAU;AACjC,kBAAU;AACV,gBAAQ,OAAO,MAAM,KAAK;AAAA,MAC5B,CAAC;AAED,YAAM,YAAY,YAAY,IAAI;AAClC,YAAM,eAAe,MAAM,OAAO,cAAe,CAAC,GAAG;AAAA,QACnD,OAAO,CAAC,WAAW,QAAQ,MAAM;AAAA,QACjC,KAAK;AAAA;AAAA,UAEH,GAAG,QAAQ;AAAA,UACX,GAAG;AAAA,QACL;AAAA,QACA,KAAK,OAAO;AAAA,QACZ,OAAO;AAAA,MACT,CAAC;AAED,MAAC,aAAa,QAA4B,KAAK,YAAY;AAC3D,MAAC,aAAa,QAA4B,KAAK,YAAY;AAE3D,mBAAa,GAAG,SAAS,CAAC,SAAS;AACjC,YAAI,SAAS,GAAG;AACd,kBAAQ,iBAAiB;AAAA,YACvB,WAAW;AAAA,YACX,YAAY,IAAI,IAAI;AAAA,UACtB;AAAA,QACF;AACA,iBAAS,YAAY,gBAAgB;AAAA,UACnC,SAAS,OAAO;AAAA,UAChB;AAAA,UACA;AAAA,QACF,CAAC;AACD,YAAI,SAAS,GAAG;AACd,iBAAO,IAAI;AACX;AAAA,QACF;AACA,gBAAQ,IAAI;AAAA,MACd,CAAC;AAAA,IACH,CAAC;AAAA,EACH,SAAS,OAAO;AACd,UAAM,IAAI,MAAM,iCAAiC,KAAK,EAAE;AAAA,EAC1D;AACF","sourcesContent":["import {spawn} from 'child_process';\nimport {PassThrough, Readable} from 'stream';\n\nimport {getBugsnag} from '../utils/bugsnag.js';\nimport {MetricsExporter, MetricName} from '../utils/metrics-exporter.js';\n\nimport {DeploymentConfig, DeploymentHooks} from './types.js';\n\ninterface BuildProjectOptions {\n  config: DeploymentConfig;\n  assetPath?: string;\n  hooks?: DeploymentHooks;\n  metricsExporter?: MetricsExporter;\n}\n\nexport async function buildProject(options: BuildProjectOptions) {\n  const {config, assetPath, hooks} = options;\n  const Bugsnag = getBugsnag();\n\n  if (hooks?.buildFunction) {\n    const startTime = performance.now();\n    return hooks\n      .buildFunction(assetPath)\n      .then(() => {\n        options.metricsExporter?.add(\n          MetricName.BuildTime,\n          performance.now() - startTime,\n        );\n      })\n      .catch((error) => {\n        throw new Error(`Build function failed with error: ${error}`);\n      });\n  }\n\n  const assetPathEnvironment = assetPath\n    ? {HYDROGEN_ASSET_BASE_URL: assetPath}\n    : {};\n  try {\n    await new Promise((resolve, reject) => {\n      let stderr = '';\n      const stderrStream = new PassThrough();\n\n      stderrStream.on('data', (chunk) => {\n        stderr += chunk;\n        process.stderr.write(chunk);\n      });\n\n      const startTime = performance.now();\n      const buildCommand = spawn(config.buildCommand!, [], {\n        stdio: ['inherit', 'pipe', 'pipe'],\n        env: {\n          // eslint-disable-next-line no-process-env\n          ...process.env,\n          ...assetPathEnvironment,\n        },\n        cwd: config.rootPath,\n        shell: true,\n      });\n\n      (buildCommand.stderr as Readable | null)?.pipe(stderrStream);\n      (buildCommand.stdout as Readable | null)?.pipe(stderrStream);\n\n      buildCommand.on('close', (code) => {\n        if (code === 0) {\n          options.metricsExporter?.add(\n            MetricName.BuildTime,\n            performance.now() - startTime,\n          );\n        }\n        Bugsnag?.addMetadata('buildCommand', {\n          command: config.buildCommand,\n          stderr,\n          code,\n        });\n        if (code !== 0) {\n          reject(code);\n          return;\n        }\n        resolve(code);\n      });\n    });\n  } catch (error) {\n    throw new Error(`Build failed with error code: ${error}`);\n  }\n}\n"]}