{"version":3,"sources":["../../src/deploy/verify-deployment.ts"],"names":[],"mappings":"AAAA,SAAQ,aAAY;AACpB,SAAgB,kBAAiB;AAEjC,SAA2C,yBAAwB;AASnE,eAAsB,iBACpB,SACe;AACf,QAAM,EAAC,QAAQ,KAAK,QAAQ,MAAK,IAAI;AACrC,SAAO,sBAAsB;AAC7B,aAAW,qDAAqD,MAAM;AAEtE,MAAI,WAAW;AACf,MAAI,QAAQ;AACZ,MAAI,0BAA0B;AAC9B,QAAM,YAAY,KAAK,IAAI;AAE3B,QAAM,iBAAiB,YAAY;AACjC,QAAI,WAAW,IAAI;AACjB,cAAQ;AAAA,IACV,WAAW,WAAW,MAAM,GAAG;AAC7B,eAAS;AAAA,IACX;AACA,UAAM,eAAe,KAAK,IAAI,IAAI,aAAa;AAC/C,QAAI,cAAc,QAAQ,MAAO,OAAO,yBAAyB;AAC/D,YAAM,QAAQ,IAAI;AAAA,QAChB;AAAA,MACF;AACA,UAAI,CAAC,yBAAyB;AAC5B,kCAA0B;AAC1B,eAAO,sBAAsB,KAAK;AAAA,MACpC;AACA,YAAM;AAAA,IACR;AACA;AACA,UAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,KAAK,CAAC;AACzD,UAAM,MAAM;AAAA,EACd;AAEA,QAAM,QAAQ,YAAY;AACxB,QAAI;AACF,YAAM,WAAW,MAAM,MAAM,GAAG,GAAG,uBAAuB;AAAA,QACxD,QAAQ;AAAA,MACV,CAAC;AACD,UAAI,SAAS,WAAW,KAAK;AAC3B,mBAAW,wCAAwC,MAAM;AACzD,eAAO,yBAAyB;AAChC,eAAO,QAAQ,QAAQ;AAAA,MACzB;AACA,YAAM,eAAe;AAAA,IACvB,QAAQ;AACN,YAAM,eAAe;AAAA,IACvB;AAAA,EACF;AAEA,QAAM,MAAM;AACd","sourcesContent":["import {fetch} from '@shopify/cli-kit/node/http';\nimport {Logger, outputInfo} from '@shopify/cli-kit/node/output';\n\nimport {DeploymentConfig, DeploymentHooks, VerificationError} from './types.js';\n\ninterface VerificationOptions {\n  config: DeploymentConfig;\n  hooks?: DeploymentHooks;\n  logger: Logger;\n  url: string;\n}\n\nexport async function verifyDeployment(\n  options: VerificationOptions,\n): Promise<void> {\n  const {config, url, logger, hooks} = options;\n  hooks?.onVerificationStart?.();\n  outputInfo('Verifying worker deployment has been completed...', logger);\n\n  let attempts = 0;\n  let delay = 0;\n  let calledVerificationError = false;\n  const startTime = Date.now();\n\n  const handleInterval = async () => {\n    if (attempts < 10) {\n      delay = 500;\n    } else if (attempts % 5 === 0) {\n      delay += 5000;\n    }\n    const elapsedTime = (Date.now() - startTime) / 1000;\n    if (elapsedTime + delay / 1000 > config.verificationMaxDuration) {\n      const error = new VerificationError(\n        'Unable to verify worker deployment completion.',\n      );\n      if (!calledVerificationError) {\n        calledVerificationError = true;\n        hooks?.onVerificationError?.(error);\n      }\n      throw error;\n    }\n    attempts++;\n    await new Promise((resolve) => setTimeout(resolve, delay));\n    await check();\n  };\n\n  const check = async () => {\n    try {\n      const response = await fetch(`${url}/.oxygen/deployment`, {\n        method: 'HEAD',\n      });\n      if (response.status === 200) {\n        outputInfo('Deployment verification check passed', logger);\n        hooks?.onVerificationComplete?.();\n        return Promise.resolve();\n      }\n      await handleInterval();\n    } catch {\n      await handleInterval();\n    }\n  };\n\n  await check();\n}\n"]}