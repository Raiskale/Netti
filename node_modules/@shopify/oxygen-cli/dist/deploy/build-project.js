import { spawn } from 'child_process';
import { PassThrough } from 'stream';
import { getBugsnag } from '../utils/bugsnag.js';
import { MetricName } from '../utils/metrics-exporter.js';

async function buildProject(options) {
  const { config, assetPath, hooks } = options;
  const Bugsnag = getBugsnag();
  if (hooks?.buildFunction) {
    const startTime = performance.now();
    return hooks.buildFunction(assetPath).then(() => {
      options.metricsExporter?.add(
        MetricName.BuildTime,
        performance.now() - startTime
      );
    }).catch((error) => {
      throw new Error(`Build function failed with error: ${error}`);
    });
  }
  const assetPathEnvironment = assetPath ? { HYDROGEN_ASSET_BASE_URL: assetPath } : {};
  try {
    await new Promise((resolve, reject) => {
      let stderr = "";
      const stderrStream = new PassThrough();
      stderrStream.on("data", (chunk) => {
        stderr += chunk;
        process.stderr.write(chunk);
      });
      const startTime = performance.now();
      const buildCommand = spawn(config.buildCommand, [], {
        stdio: ["inherit", "pipe", "pipe"],
        env: {
          // eslint-disable-next-line no-process-env
          ...process.env,
          ...assetPathEnvironment
        },
        cwd: config.rootPath,
        shell: true
      });
      buildCommand.stderr?.pipe(stderrStream);
      buildCommand.stdout?.pipe(stderrStream);
      buildCommand.on("close", (code) => {
        if (code === 0) {
          options.metricsExporter?.add(
            MetricName.BuildTime,
            performance.now() - startTime
          );
        }
        Bugsnag?.addMetadata("buildCommand", {
          command: config.buildCommand,
          stderr,
          code
        });
        if (code !== 0) {
          reject(code);
          return;
        }
        resolve(code);
      });
    });
  } catch (error) {
    throw new Error(`Build failed with error code: ${error}`);
  }
}

export { buildProject };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=build-project.js.map