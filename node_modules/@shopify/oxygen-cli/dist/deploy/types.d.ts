interface Build {
    id: string;
    assetPath: string;
}
interface ClientError extends Error {
    statusCode: number;
}
interface DeploymentHooks {
    buildFunction?: (urlPath?: string) => Promise<void>;
    onVerificationStart?: () => void;
    onVerificationComplete?: () => void;
    onVerificationError?: (error: Error) => void;
    onUploadFilesStart?: () => void;
    onUploadFilesError?: (error: Error) => void;
    onUploadFilesComplete?: () => void;
}
interface DeploymentConfig {
    assetsDir?: string;
    bugsnag: boolean;
    buildCommand?: string;
    deploymentToken: DeploymentToken;
    deploymentUrl: string;
    environmentTag?: string;
    metadata: {
        description?: string;
        user?: string;
        version?: string;
        url?: string;
    };
    publicDeployment: boolean;
    rootPath?: string;
    skipBuild: boolean;
    skipVerification: boolean;
    verificationMaxDuration: number;
    workerDir?: string;
    workerOnly: boolean;
}
interface DeploymentToken {
    accessToken: string;
    allowedResource: string;
    appId: string;
    client: string;
    expiresAt: string;
    namespace: string;
    namespaceId: string;
}
interface DeploymentManifestFile {
    filePath: string;
    fileSize: number;
    mimeType: string;
    fileHash: string;
    fileType: string;
}
interface EnvironmentInput {
    handle?: string;
    tag?: string;
}
declare enum FileType {
    Worker = "WORKER",
    Asset = "ASSET"
}
interface OxygenError {
    message: string;
}
declare class VerificationError extends Error {
}

export { Build, ClientError, DeploymentConfig, DeploymentHooks, DeploymentManifestFile, DeploymentToken, EnvironmentInput, FileType, OxygenError, VerificationError };
