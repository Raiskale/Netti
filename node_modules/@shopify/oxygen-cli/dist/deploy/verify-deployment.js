import { fetch } from '@shopify/cli-kit/node/http';
import { outputInfo } from '@shopify/cli-kit/node/output';
import { VerificationError } from './types.js';

async function verifyDeployment(options) {
  const { config, url, logger, hooks } = options;
  hooks?.onVerificationStart?.();
  outputInfo("Verifying worker deployment has been completed...", logger);
  let attempts = 0;
  let delay = 0;
  let calledVerificationError = false;
  const startTime = Date.now();
  const handleInterval = async () => {
    if (attempts < 10) {
      delay = 500;
    } else if (attempts % 5 === 0) {
      delay += 5e3;
    }
    const elapsedTime = (Date.now() - startTime) / 1e3;
    if (elapsedTime + delay / 1e3 > config.verificationMaxDuration) {
      const error = new VerificationError(
        "Unable to verify worker deployment completion."
      );
      if (!calledVerificationError) {
        calledVerificationError = true;
        hooks?.onVerificationError?.(error);
      }
      throw error;
    }
    attempts++;
    await new Promise((resolve) => setTimeout(resolve, delay));
    await check();
  };
  const check = async () => {
    try {
      const response = await fetch(`${url}/.oxygen/deployment`, {
        method: "HEAD"
      });
      if (response.status === 200) {
        outputInfo("Deployment verification check passed", logger);
        hooks?.onVerificationComplete?.();
        return Promise.resolve();
      }
      await handleInterval();
    } catch {
      await handleInterval();
    }
  };
  await check();
}

export { verifyDeployment };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=verify-deployment.js.map