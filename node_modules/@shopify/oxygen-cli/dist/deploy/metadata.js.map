{"version":3,"sources":["../../src/deploy/metadata.ts"],"names":["keyMapping"],"mappings":"AAAA,SAAQ,kBAA6B;AACrC,SAAQ,0BAAyB;AACjC,SAAgB,kBAAiB;AAEjC,SAAQ,sBAAqB;AAS7B,eAAsB,YACpB,QACA,QACmB;AACnB,QAAM,SAAS,WAAW;AAC1B,MAAI,WAAqB,CAAC;AAE1B,MAAI;AACF,UAAM,YAAY,MAAM,mBAAmB,OAAO,QAAQ;AAC1D,UAAM,UAAU,kBAAkB,KAAK,UAAU,IAAI,KAAK,CAAC,GAAG,CAAC;AAE/D,eAAW;AAAA,MACT,OAAO,UAAU;AAAA,MACjB;AAAA,MACA,YAAY,UAAU;AAAA,MACtB,WAAW,UAAU;AAAA,MACrB,eAAe,kBAAkB,UAAU,OAAO;AAAA,IACpD;AAAA,EACF,SAAS,OAAO;AACd;AAAA,MACE;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAEA,MAAI,OAAO,QAAQ,OAAO,SAAS,WAAW;AAC5C,eAAW;AAAA,MACT,GAAG;AAAA,MACH,GAAG,OAAO;AAAA,IACZ;AAAA,EACF;AAEA,SAAO;AAAA,IACL,MAAM,OAAO,OAAO,OAAO,OAAO;AAAA,IAClC,GAAG;AAAA,IACH,OAAO,OAAO,SAAS,QAAQ,SAAS;AAAA,IACxC,eAAe,OAAO,SAAS,eAAe,SAAS;AAAA,IACvD,WAAW,OAAO,SAAS,WAAW,SAAS;AAAA,IAC/C,KAAK,OAAO,SAAS,OAAO,SAAS;AAAA,EACvC;AACF;AAEA,SAAS,kBAAkB,eAA+B;AACxD,QAAM,QAAQ,cAAc,MAAM,IAAI,EAAE,CAAC,GAAG,KAAK,KAAK;AACtD,MAAI,MAAM,UAAU;AAAgB,WAAO;AAE3C,QAAM,iBAAiB,MAAM,YAAY,KAAK,iBAAiB,CAAC;AAChE,SAAO,GAAG,MAAM;AAAA,IACd;AAAA,IACA,iBAAiB,KAAK,iBAAiB,iBAAiB;AAAA,EAC1D,CAAC;AACH;AAEO,SAAS,oBACd,QACA,UAC8B;AAC9B,QAAM,MAAM,OAAO,kBAAkB,SAAS;AAC9C,SAAO,MAAM,EAAC,IAAG,IAAI;AACvB;AAEO,SAAS,aAAa,UAA8B;AACzD,QAAM,SAAmB,CAAC;AAE1B,QAAM,aAAa,CAAC,UAAkB,eAAuB;AAC3D,UAAM,aAAa,KAAK,UAAU,UAAU;AAC5C,QAAI,WAAW,SAAS,gBAAgB;AACtC,YAAM,IAAI;AAAA,QACR,YAAY,QAAQ,yCAAyC,cAAc;AAAA,MAC7E;AAAA,IACF;AACA,UAAM,QAAQ,GAAG,QAAQ,IAAI,UAAU;AACvC,WAAO,KAAK,KAAK;AAAA,EACnB;AAEA,MAAI,SAAS,SAAS,WAAW;AAC/B,UAAMA,cAAa;AAAA,MACjB,SAAS;AAAA,MACT,KAAK;AAAA,IACP;AAEA,eAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQA,WAAU,GAAG;AACrD,YAAM,cAAc;AACpB,UAAI,SAAS,WAAW,GAAG;AACzB,eAAO;AAAA,UACL,GAAG,SAAS,IAAI,IAAI,KAAK,IAAI,KAAK,UAAU,SAAS,WAAW,CAAC,CAAC;AAAA,QACpE;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,QAAM,aAAa;AAAA,IACjB,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,YAAY;AAAA,IACZ,eAAe;AAAA,IACf,WAAW;AAAA,IACX,KAAK;AAAA,EACP;AAEA,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,UAAU,GAAG;AACrD,UAAM,cAAc;AACpB,QAAI,SAAS,WAAW,GAAG;AACzB,iBAAW,OAAO,SAAS,WAAW,CAAE;AAAA,IAC1C;AAAA,EACF;AAEA,SAAO;AACT","sourcesContent":["import {ciPlatform, CIMetadata} from '@shopify/cli-kit/node/context/local';\nimport {getLatestGitCommit} from '@shopify/cli-kit/node/git';\nimport {Logger, outputWarn} from '@shopify/cli-kit/node/output';\n\nimport {maxLabelLength} from '../utils/utils.js';\n\nimport {DeploymentConfig, EnvironmentInput} from './types.js';\n\ntype Metadata = CIMetadata & {\n  commitDate?: string;\n  name?: string;\n};\n\nexport async function getMetadata(\n  config: DeploymentConfig,\n  logger: Logger,\n): Promise<Metadata> {\n  const ciInfo = ciPlatform();\n  let metadata: Metadata = {};\n\n  try {\n    const gitCommit = await getLatestGitCommit(config.rootPath);\n    const branch = (/HEAD -> ([^,]*)/.exec(gitCommit.refs) || [])[1];\n\n    metadata = {\n      actor: gitCommit.author_name,\n      branch,\n      commitDate: gitCommit.date,\n      commitSha: gitCommit.hash,\n      commitMessage: createCommitTitle(gitCommit.message),\n    };\n  } catch (error) {\n    outputWarn(\n      'Could not retrieve Git history, commit message will be unavailable.',\n      logger,\n    );\n  }\n\n  if (ciInfo.isCI && ciInfo.name !== 'unknown') {\n    metadata = {\n      ...metadata,\n      ...ciInfo.metadata,\n    };\n  }\n\n  return {\n    name: ciInfo.isCI ? ciInfo.name : 'none',\n    ...metadata,\n    actor: config.metadata.user ?? metadata.actor,\n    commitMessage: config.metadata.description ?? metadata.commitMessage,\n    commitSha: config.metadata.version ?? metadata.commitSha,\n    url: config.metadata.url ?? metadata.url,\n  };\n}\n\nfunction createCommitTitle(commitMessage: string): string {\n  const title = commitMessage.split('\\n')[0]?.trim() || '';\n  if (title.length <= maxLabelLength) return title;\n\n  const lastSpaceIndex = title.lastIndexOf(' ', maxLabelLength - 3);\n  return `${title.substring(\n    0,\n    lastSpaceIndex > -1 ? lastSpaceIndex : maxLabelLength - 3,\n  )}...`;\n}\n\nexport function getEnvironmentInput(\n  config: DeploymentConfig,\n  metadata: CIMetadata,\n): EnvironmentInput | undefined {\n  const tag = config.environmentTag || metadata.branch;\n  return tag ? {tag} : undefined;\n}\n\nexport function createLabels(metadata: Metadata): string[] {\n  const labels: string[] = [];\n\n  const checkLabel = (labelKey: string, labelValue: string) => {\n    const jsonString = JSON.stringify(labelValue);\n    if (jsonString.length > maxLabelLength) {\n      throw new Error(\n        `Provided ${labelKey} metadata exceeds maximum length (max ${maxLabelLength} characters).`,\n      );\n    }\n    const label = `${labelKey}=${jsonString}`;\n    labels.push(label);\n  };\n\n  if (metadata.name !== 'unknown') {\n    const keyMapping = {\n      attempt: 'attempt',\n      run: 'runId',\n    };\n\n    for (const [key, value] of Object.entries(keyMapping)) {\n      const metadataKey = key as keyof Metadata;\n      if (metadata[metadataKey]) {\n        labels.push(\n          `${metadata.name}-${value}=${JSON.stringify(metadata[metadataKey])}`,\n        );\n      }\n    }\n  }\n\n  const keyMapping = {\n    actor: 'user',\n    branch: 'branch',\n    commitDate: 'commit-date',\n    commitMessage: 'description',\n    commitSha: 'version',\n    url: 'url',\n  };\n\n  for (const [key, value] of Object.entries(keyMapping)) {\n    const metadataKey = key as keyof Metadata;\n    if (metadata[metadataKey]) {\n      checkLabel(value, metadata[metadataKey]!);\n    }\n  }\n\n  return labels;\n}\n"]}