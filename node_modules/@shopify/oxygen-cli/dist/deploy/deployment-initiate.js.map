{"version":3,"sources":["../../src/deploy/deployment-initiate.ts"],"names":[],"mappings":"AAAA,SAAQ,sBAAqB;AAC7B,SAAQ,kBAAiB;AACzB,SAAgB,uBAAsB;AAEtC,SAAQ,cAAc,cAAa;AAOnC;AAAA,EACE;AAAA,OAGK;AAsBP,eAAsB,mBACpB,SACqC;AACrC,QAAM,EAAC,QAAQ,OAAO,OAAM,IAAI;AAEhC,QAAM,YAAY;AAAA,IAChB,SAAS,MAAM;AAAA,IACf,aAAa,MAAM;AAAA,IACnB,OAAO,MAAM;AAAA,IACb,QAAQ,MAAM;AAAA,IACd,WAAW,CAAC,OAAO;AAAA,EACrB;AAEA,MAAI;AACF,UAAM,WAAwC,MAAM,eAAe;AAAA,MACjE,OAAO;AAAA,MACP,KAAK;AAAA,MACL,KAAK,GAAG,OAAO,aAAa;AAAA,MAC5B,OAAO,OAAO,gBAAgB;AAAA,MAC9B;AAAA,MACA,cAAc;AAAA,QACZ,CAAC,OAAO,qBAAqB,GAAG,OAAO,gBAAgB;AAAA,MACzD;AAAA,IACF,CAAC;AAED,QAAI,SAAS,mBAAmB,WAAW,UAAU,GAAG;AACtD,YAAM,IAAI;AAAA,QACR,gCAAgC,SAAS,mBAAmB,WAAW,CAAC,GAAG,OAAO;AAAA,MACpF;AAAA,IACF;AAEA;AAAA,MACE,yBAAyB,SAAS,mBAAmB,kBAAkB,MAAM;AAAA,MAC7E;AAAA,IACF;AACA,WAAO,SAAS;AAAA,EAClB,SAAS,OAAO;AACd,iBAAa,KAAK;AAElB,UAAM;AAAA,EACR;AACF","sourcesContent":["import {graphqlRequest} from '@shopify/cli-kit/node/api/graphql';\nimport {AbortError} from '@shopify/cli-kit/node/error';\nimport {Logger, outputCompleted} from '@shopify/cli-kit/node/output';\n\nimport {errorHandler, Header} from '../utils/utils.js';\n\nimport {\n  DeploymentConfig,\n  DeploymentManifestFile,\n  EnvironmentInput,\n} from './types.js';\nimport {\n  DeploymentInitiateQuery,\n  DeploymentInitiateQueryData,\n  DeploymentInitiateResponse,\n} from './graphql/deployment-initiate.js';\n\ntype DeploymentInitiateInput =\n  | {\n      buildId: string;\n      environment?: never;\n      labels?: string[];\n      manifest: DeploymentManifestFile[];\n    }\n  | {\n      environment?: EnvironmentInput;\n      buildId?: never;\n      labels?: string[];\n      manifest: DeploymentManifestFile[];\n    };\n\ninterface DeploymentInitiateOptions {\n  config: DeploymentConfig;\n  input: DeploymentInitiateInput;\n  logger: Logger;\n}\n\nexport async function deploymentInitiate(\n  options: DeploymentInitiateOptions,\n): Promise<DeploymentInitiateResponse> {\n  const {config, input, logger} = options;\n\n  const variables = {\n    buildId: input.buildId,\n    environment: input.environment,\n    files: input.manifest,\n    labels: input.labels,\n    isPrivate: !config.publicDeployment,\n  };\n\n  try {\n    const response: DeploymentInitiateQueryData = await graphqlRequest({\n      query: DeploymentInitiateQuery,\n      api: 'Oxygen',\n      url: `${config.deploymentUrl}/api/v2/admin/graphql`,\n      token: config.deploymentToken.accessToken,\n      variables,\n      addedHeaders: {\n        [Header.OxygenNamespaceHandle]: config.deploymentToken.namespace,\n      },\n    });\n\n    if (response.deploymentInitiate.userErrors.length >= 1) {\n      throw new AbortError(\n        `Failed to create deployment. ${response.deploymentInitiate.userErrors[0]?.message}`,\n      );\n    }\n\n    outputCompleted(\n      `Deployment initiated, ${response.deploymentInitiate.deploymentTargets.length} files to upload.`,\n      logger,\n    );\n    return response.deploymentInitiate;\n  } catch (error) {\n    errorHandler(error);\n\n    throw error;\n  }\n}\n"]}