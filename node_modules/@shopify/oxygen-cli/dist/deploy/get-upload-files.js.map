{"version":3,"sources":["../../src/deploy/get-upload-files.ts"],"names":[],"mappings":"AAAA,SAAQ,MAAM,cAAc,oBAAmB;AAC/C,SAAQ,gBAAe;AACvB,SAAQ,UAAU,oBAAmB;AACrC,SAAQ,sBAAqB;AAE7B,SAAyB,kBAAiB;AAE1C,SAAkD,gBAAe;AAEjE,eAAsB,eACpB,QACA,iBACmC;AACnC,QAAM,aAAa,SAAS,OAAO,UAAW,OAAO,SAAU;AAC/D,QAAM,cAAc,MAAM,KAAK,GAAG,UAAU,KAAK;AACjD,MAAI,WAAW,sBAAsB;AAAA,IACnC,OAAO;AAAA,IACP,UAAU;AAAA,IACV,MAAM,SAAS;AAAA,IACf,QAAQ;AAAA,EACV,CAAC;AAED,MAAI,CAAC,OAAO,YAAY;AACtB,UAAM,YAAY,SAAS,OAAO,UAAW,OAAO,SAAU;AAC9D,UAAM,aAAa,MAAM,KAAK,GAAG,SAAS,KAAK;AAC/C,eAAW;AAAA,MACT,GAAG;AAAA,MACH,GAAG,sBAAsB;AAAA,QACvB,OAAO;AAAA,QACP,UAAU;AAAA,QACV,MAAM,SAAS;AAAA,QACf,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAAA,EACF;AACA,mBAAiB,IAAI,WAAW,mBAAmB,SAAS,MAAM;AAClE,QAAM,YACJ,SAAS,OAAO,CAAC,OAAO,SAAS,QAAQ,KAAK,UAAU,CAAC,IAAI;AAC/D,mBAAiB,IAAI,WAAW,oBAAoB,SAAS;AAE7D,SAAO;AACT;AAEA,SAAS,WAAW,MAAsB;AACxC,QAAM,OAAO,aAAa,IAAI;AAC9B,SAAO,SAAS,IAAI;AACtB;AASA,SAAS,sBACP,QAC0B;AAC1B,QAAM,EAAC,OAAO,UAAU,MAAM,OAAM,IAAI;AACxC,QAAM,WAAqC,CAAC;AAC5C,QAAM,QAAQ,CAAC,SAAiB;AAC9B,UAAM,WAAW,aAAa,UAAU,IAAI;AAC5C,QAAI,UAAU,CAAC,OAAO,QAAQ,GAAG;AAC/B;AAAA,IACF;AAEA,aAAS,KAAK;AAAA,MACZ;AAAA,MACA,UAAU,aAAa,IAAI;AAAA,MAC3B,UAAU,eAAe,IAAI;AAAA,MAC7B,UAAU;AAAA,MACV,UAAU,WAAW,IAAI;AAAA,IAC3B,CAAC;AAAA,EACH,CAAC;AACD,SAAO;AACT;AAEA,SAAS,iBAAiB,UAA2B;AACnD,QAAM,oBAAoB,CAAC,WAAW,YAAY,QAAQ,OAAO,MAAM;AACvE,QAAM,mBAAmB,CAAC,OAAO;AACjC,QAAM,cAAc,KAAK,iBAAiB;AAAA,IACxC;AAAA,EACF,CAAC,KAAK,kBAAkB,KAAK,GAAG,CAAC;AACjC,QAAM,QAAQ,IAAI,OAAO,WAAW;AACpC,SAAO,MAAM,KAAK,SAAS,YAAY,CAAC;AAC1C;AAEA,SAAS,gBAAgB,UAA2B;AAClD,QAAM,uBAAuB,CAAC,MAAM;AACpC,QAAM,cAAc,IAAI,qBAAqB,KAAK,GAAG,CAAC;AACtD,QAAM,QAAQ,IAAI,OAAO,WAAW;AACpC,SAAO,CAAC,MAAM,KAAK,SAAS,YAAY,CAAC;AAC3C","sourcesContent":["import {glob, fileSizeSync, readFileSync} from '@shopify/cli-kit/node/fs';\nimport {fileHash} from '@shopify/cli-kit/node/crypto';\nimport {joinPath, relativePath} from '@shopify/cli-kit/node/path';\nimport {lookupMimeType} from '@shopify/cli-kit/node/mimes';\n\nimport {MetricsExporter, MetricName} from '../utils/metrics-exporter.js';\n\nimport {DeploymentConfig, DeploymentManifestFile, FileType} from './types.js';\n\nexport async function getUploadFiles(\n  config: DeploymentConfig,\n  metricsExporter?: MetricsExporter,\n): Promise<DeploymentManifestFile[]> {\n  const workerPath = joinPath(config.rootPath!, config.workerDir!);\n  const workerFiles = await glob(`${workerPath}/**`);\n  let manifest = createManifestEntries({\n    files: workerFiles,\n    basePath: workerPath,\n    type: FileType.Worker,\n    filter: workerFileFilter,\n  });\n\n  if (!config.workerOnly) {\n    const assetPath = joinPath(config.rootPath!, config.assetsDir!);\n    const assetFiles = await glob(`${assetPath}/**`);\n    manifest = [\n      ...manifest,\n      ...createManifestEntries({\n        files: assetFiles,\n        basePath: assetPath,\n        type: FileType.Asset,\n        filter: assetFileFilter,\n      }),\n    ];\n  }\n  metricsExporter?.add(MetricName.NumFilesRequested, manifest.length);\n  const totalSize =\n    manifest.reduce((total, file) => total + file.fileSize, 0) / 1024;\n  metricsExporter?.add(MetricName.TotalSizeRequested, totalSize);\n\n  return manifest;\n}\n\nfunction createHash(file: string): string {\n  const buff = readFileSync(file);\n  return fileHash(buff);\n}\n\ninterface CreateManifestEntriesParams {\n  files: string[];\n  basePath: string;\n  type: FileType;\n  filter?: (arg0: string) => boolean;\n}\n\nfunction createManifestEntries(\n  params: CreateManifestEntriesParams,\n): DeploymentManifestFile[] {\n  const {files, basePath, type, filter} = params;\n  const manifest: DeploymentManifestFile[] = [];\n  files.forEach((file: string) => {\n    const filePath = relativePath(basePath, file);\n    if (filter && !filter(filePath)) {\n      return;\n    }\n\n    manifest.push({\n      filePath,\n      fileSize: fileSizeSync(file),\n      mimeType: lookupMimeType(file)!,\n      fileType: type,\n      fileHash: createHash(file),\n    });\n  });\n  return manifest;\n}\n\nfunction workerFileFilter(fileName: string): boolean {\n  const allowedExtensions = ['.js.map', '.mjs.map', '.map', '.js', '.mjs'];\n  const allowedFilenames = ['index'];\n  const regexString = `^(${allowedFilenames.join(\n    '|',\n  )})(${allowedExtensions.join('|')})$`;\n  const regex = new RegExp(regexString);\n  return regex.test(fileName.toLowerCase());\n}\n\nfunction assetFileFilter(fileName: string): boolean {\n  const disallowedExtensions = ['.map'];\n  const regexString = `(${disallowedExtensions.join('|')})$`;\n  const regex = new RegExp(regexString);\n  return !regex.test(fileName.toLowerCase());\n}\n"]}