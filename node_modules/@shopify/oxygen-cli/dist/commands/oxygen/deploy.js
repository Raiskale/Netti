import { Command, Flags } from '@oclif/core';
import { consoleError } from '@shopify/cli-kit/node/output';
import { normalizePath } from '@shopify/cli-kit/node/path';
import { initializeBugsnag, getBugsnag } from '../../utils/bugsnag.js';
import { createDeploy } from '../../deploy/index.js';
import { deployDefaults, parseToken, verifyConfig, getBuildCommandFromLockFile } from '../../utils/utils.js';
import { VerificationError } from '../../deploy/types.js';

class Deploy extends Command {
  static description = "Creates a deployment to Oxygen";
  static hidden = false;
  static flags = {
    assetsFolder: Flags.string({
      char: "a",
      description: "Assets folder",
      default: String(deployDefaults.assetsDirDefault),
      required: false
    }),
    buildCommand: Flags.string({
      char: "b",
      description: "Build command",
      required: false,
      default: String(deployDefaults.buildCommandDefault),
      parse: (input) => {
        this.hasCustomBuildCommand = true;
        return Promise.resolve(input);
      }
    }),
    disableBugsnag: Flags.boolean({
      description: "Disable Bugsnag error reporting",
      required: false,
      default: false
    }),
    environmentTag: Flags.string({
      char: "e",
      description: "Tag of the environment to deploy to",
      required: false
    }),
    verificationMaxDuration: Flags.integer({
      char: "d",
      description: "the maximum duration (in seconds) that the deployment verification step is allowed to run before it is considered failed.",
      min: 10,
      max: 300,
      required: false,
      default: deployDefaults.verificationMaxDurationDefault
    }),
    path: Flags.string({
      char: "p",
      description: "Root path",
      default: "./",
      required: false
    }),
    publicDeployment: Flags.boolean({
      env: "OXYGEN_PUBLIC_DEPLOYMENT",
      description: "Marks a preview deployment as publicly accessible.",
      required: false,
      default: false
    }),
    skipBuild: Flags.boolean({
      char: "s",
      description: "Skip running build command",
      required: false,
      default: false
    }),
    skipVerification: Flags.boolean({
      char: "v",
      description: "Skip running deployment verification step",
      required: false,
      default: false
    }),
    token: Flags.string({
      char: "t",
      description: "Oxygen deployment token",
      env: "OXYGEN_DEPLOYMENT_TOKEN",
      required: true
    }),
    workerFolder: Flags.string({
      char: "w",
      description: "Worker folder",
      default: String(deployDefaults.workerDirDefault),
      required: false
    }),
    workerOnly: Flags.boolean({
      char: "o",
      description: "Worker only deployment",
      default: false,
      required: false
    }),
    metadataDescription: Flags.string({
      description: "Description of the deployment. Will be saved and displayed in the Shopify admin",
      required: false,
      env: "OXYGEN_METADATA_DESCRIPTION"
    }),
    metadataUrl: Flags.string({
      description: "URL that links to the deployment. Will be saved and displayed in the Shopify admin",
      required: false,
      env: "OXYGEN_METADATA_URL"
    }),
    metadataUser: Flags.string({
      description: "User that initiated the deployment. Will be saved and displayed in the Shopify admin",
      required: false,
      env: "OXYGEN_METADATA_USER"
    }),
    metadataVersion: Flags.string({
      description: "A version identifier for the deployment. Will be saved and displayed in the Shopify admin",
      required: false,
      env: "OXYGEN_METADATA_VERSION"
    })
  };
  static hasCustomBuildCommand = false;
  async run() {
    try {
      const { flags } = await this.parse(Deploy);
      const rootPath = normalizePath(flags.path);
      initializeBugsnag(flags.disableBugsnag);
      const Bugsnag = getBugsnag();
      const deploymentUrl = (
        // eslint-disable-next-line no-process-env
        process.env.UNSAFE_OXYGEN_DEPLOYMENT_URL || "https://oxygen.shopifyapps.com"
      );
      Bugsnag?.addMetadata("flags", {
        flags: { ...flags, token: "***" },
        deploymentUrl
      });
      const config = {
        assetsDir: normalizePath(flags.assetsFolder),
        bugsnag: !flags.disableBugsnag,
        buildCommand: flags.buildCommand,
        deploymentToken: parseToken(flags.token),
        environmentTag: flags.environmentTag,
        deploymentUrl,
        verificationMaxDuration: flags.verificationMaxDuration,
        metadata: {
          description: flags.metadataDescription,
          url: flags.metadataUrl,
          user: flags.metadataUser,
          version: flags.metadataVersion
        },
        publicDeployment: flags.publicDeployment,
        rootPath,
        skipBuild: flags.skipBuild,
        skipVerification: flags.skipVerification,
        workerDir: normalizePath(flags.workerFolder),
        workerOnly: flags.workerOnly
      };
      await verifyConfig({ config });
      if (!Deploy.hasCustomBuildCommand && !config.skipBuild) {
        config.buildCommand = getBuildCommandFromLockFile(config);
      }
      await createDeploy({ config });
    } catch (error) {
      const Bugsnag = getBugsnag();
      if (Bugsnag && (error instanceof Error || typeof error === "string")) {
        Bugsnag.notify(error);
      }
      if (!(error instanceof Error)) {
        consoleError(error);
      } else if (!(error instanceof VerificationError)) {
        consoleError(error.message);
      }
      this.exit(1);
    }
  }
}

export { Deploy };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=deploy.js.map