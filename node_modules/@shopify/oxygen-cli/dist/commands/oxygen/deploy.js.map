{"version":3,"sources":["../../../src/commands/oxygen/deploy.ts"],"names":[],"mappings":"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","sourcesContent":["import {Command, Flags} from '@oclif/core';\nimport {consoleError} from '@shopify/cli-kit/node/output';\nimport {normalizePath} from '@shopify/cli-kit/node/path';\n\nimport {getBugsnag, initializeBugsnag} from '../../utils/bugsnag.js';\nimport {createDeploy} from '../../deploy/index.js';\nimport {\n  deployDefaults,\n  getBuildCommandFromLockFile,\n  parseToken,\n  verifyConfig,\n} from '../../utils/utils.js';\nimport type {DeploymentConfig} from '../../deploy/types.js';\nimport {VerificationError} from '../../deploy/types.js';\n\nexport class Deploy extends Command {\n  static description = 'Creates a deployment to Oxygen';\n  static hidden = false;\n  static flags = {\n    assetsFolder: Flags.string({\n      char: 'a',\n      description: 'Assets folder',\n      default: String(deployDefaults.assetsDirDefault),\n      required: false,\n    }),\n    buildCommand: Flags.string({\n      char: 'b',\n      description: 'Build command',\n      required: false,\n      default: String(deployDefaults.buildCommandDefault!),\n      parse: (input): Promise<string> => {\n        this.hasCustomBuildCommand = true;\n        return Promise.resolve(input);\n      },\n    }),\n    disableBugsnag: Flags.boolean({\n      description: 'Disable Bugsnag error reporting',\n      required: false,\n      default: false,\n    }),\n    environmentTag: Flags.string({\n      char: 'e',\n      description: 'Tag of the environment to deploy to',\n      required: false,\n    }),\n    verificationMaxDuration: Flags.integer({\n      char: 'd',\n      description:\n        'the maximum duration (in seconds) that the deployment verification step is allowed to run before it is considered failed.',\n      min: 10,\n      max: 300,\n      required: false,\n      default: deployDefaults.verificationMaxDurationDefault as number,\n    }),\n    path: Flags.string({\n      char: 'p',\n      description: 'Root path',\n      default: './',\n      required: false,\n    }),\n    publicDeployment: Flags.boolean({\n      env: 'OXYGEN_PUBLIC_DEPLOYMENT',\n      description: 'Marks a preview deployment as publicly accessible.',\n      required: false,\n      default: false,\n    }),\n    skipBuild: Flags.boolean({\n      char: 's',\n      description: 'Skip running build command',\n      required: false,\n      default: false,\n    }),\n    skipVerification: Flags.boolean({\n      char: 'v',\n      description: 'Skip running deployment verification step',\n      required: false,\n      default: false,\n    }),\n    token: Flags.string({\n      char: 't',\n      description: 'Oxygen deployment token',\n      env: 'OXYGEN_DEPLOYMENT_TOKEN',\n      required: true,\n    }),\n    workerFolder: Flags.string({\n      char: 'w',\n      description: 'Worker folder',\n      default: String(deployDefaults.workerDirDefault),\n      required: false,\n    }),\n    workerOnly: Flags.boolean({\n      char: 'o',\n      description: 'Worker only deployment',\n      default: false,\n      required: false,\n    }),\n    metadataDescription: Flags.string({\n      description:\n        'Description of the deployment. Will be saved and displayed in the Shopify admin',\n      required: false,\n      env: 'OXYGEN_METADATA_DESCRIPTION',\n    }),\n    metadataUrl: Flags.string({\n      description:\n        'URL that links to the deployment. Will be saved and displayed in the Shopify admin',\n      required: false,\n      env: 'OXYGEN_METADATA_URL',\n    }),\n    metadataUser: Flags.string({\n      description:\n        'User that initiated the deployment. Will be saved and displayed in the Shopify admin',\n      required: false,\n      env: 'OXYGEN_METADATA_USER',\n    }),\n    metadataVersion: Flags.string({\n      description:\n        'A version identifier for the deployment. Will be saved and displayed in the Shopify admin',\n      required: false,\n      env: 'OXYGEN_METADATA_VERSION',\n    }),\n  };\n\n  static hasCustomBuildCommand = false;\n\n  async run() {\n    try {\n      const {flags} = await this.parse(Deploy);\n      const rootPath = normalizePath(flags.path);\n\n      initializeBugsnag(flags.disableBugsnag);\n      const Bugsnag = getBugsnag();\n\n      const deploymentUrl =\n        // eslint-disable-next-line no-process-env\n        process.env.UNSAFE_OXYGEN_DEPLOYMENT_URL ||\n        'https://oxygen.shopifyapps.com';\n      Bugsnag?.addMetadata('flags', {\n        flags: {...flags, token: '***'},\n        deploymentUrl,\n      });\n\n      const config: DeploymentConfig = {\n        assetsDir: normalizePath(flags.assetsFolder),\n        bugsnag: !flags.disableBugsnag,\n        buildCommand: flags.buildCommand!,\n        deploymentToken: parseToken(flags.token!),\n        environmentTag: flags.environmentTag,\n        deploymentUrl,\n        verificationMaxDuration: flags.verificationMaxDuration,\n        metadata: {\n          description: flags.metadataDescription,\n          url: flags.metadataUrl,\n          user: flags.metadataUser,\n          version: flags.metadataVersion,\n        },\n        publicDeployment: flags.publicDeployment,\n        rootPath,\n        skipBuild: flags.skipBuild,\n        skipVerification: flags.skipVerification,\n        workerDir: normalizePath(flags.workerFolder),\n        workerOnly: flags.workerOnly,\n      };\n\n      await verifyConfig({config});\n      if (!Deploy.hasCustomBuildCommand && !config.skipBuild) {\n        config.buildCommand = getBuildCommandFromLockFile(config);\n      }\n      await createDeploy({config});\n    } catch (error) {\n      const Bugsnag = getBugsnag();\n      if (Bugsnag && (error instanceof Error || typeof error === 'string')) {\n        Bugsnag.notify(error);\n      }\n\n      if (!(error instanceof Error)) {\n        consoleError(error as string);\n      } else if (!(error instanceof VerificationError)) {\n        consoleError(error.message);\n      }\n\n      this.exit(1);\n    }\n  }\n}\n"]}